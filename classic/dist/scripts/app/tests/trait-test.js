define(["underscore","jquery","parse","../models/Vampire","backbone","marionette","../models/Troupe","../models/SimpleTrait","../testsiteconfig","../models/Werewolf"],function(e,t,n,o,i,a,r,c,u,d){jasmine.DEFAULT_TIMEOUT_INTERVAL=6e4;var s=function(){n.$=t,n.initialize("APPLICATION_ID","yymp8UWnJ7Va32Y2Q4uzvWxfPTYuDvZSA8kdhmdR"),n.serverURL=u.serverURL},p=[{name:"Vampire",template:o},{name:"Werewolf",template:d}];describe("A suite",function(){it("contains spec with an expectation",function(){expect(!0).toBe(!0)})});var l=function(){return s(),e.eq(n.User.current().get("username"),"devuser")?n.Promise.as(n.User.current()):n.User.logIn("devuser","thedumbness")};describe("Parse",function(){beforeAll(function(){s(),n.User.current()&&n.User.logOut()}),it("isn't logged in",function(){expect(n.User.current()).toBe(null)}),it("can fail to log in",function(e){n.User.logIn("devuser","thewrongness").then(function(t){e.fail("Logged in with bad password")},function(t,n){e(n)})}),it("can log in",function(e){n.User.logIn("devuser","thedumbness").then(function(t){e()},function(t,n){e.fail(n)})})}),e.each(p,function(t){describe("A "+t.name+"'s traits",function(){var o,i;beforeAll(function(e){l().then(function(){return t.template.create_test_character("vampiretraits")}).then(function(e){return i=5,t.template.get_character(e.id)}).then(function(t){o=t,e()},function(t){e.fail(t)})}),it("show up in the history",function(e){o.get_recorded_changes().done(function(e){return expect(e.models.length).toBe(i),o.update_trait("Haven",1,"backgrounds",0,!0)}).done(function(e){return i++,o.get_recorded_changes()}).done(function(e){return expect(e.models.length).toBe(i),o.update_trait("Haven",1,"backgrounds",0,!0)}).done(function(e){return o.get_recorded_changes()}).done(function(e){return expect(e.models.length).toBe(i),o.update_trait("Haven",2,"backgrounds",0,!0)}).done(function(e){return i++,o.get_recorded_changes()}).done(function(t){expect(t.models.length).toBe(i),e()}).fail(function(t){e.fail(t)})}),it("can be renamed",function(t){var n=i,a=void 0,r=void 0,c=void 0;o.update_trait("Retainers",1,"backgrounds",0,!0).done(function(e){return i++,e.set("name","Retainers: Specialized Now"),o.update_trait(e)}).done(function(e){return i++,a=e.id,e.set("name","Retainers: Specialized Again"),e.set("value",4),o.update_trait(e)}).done(function(e){return i++,e.set("value",5),o.update_trait(e)}).done(function(){return i++,o.update_trait("Retainers: Specialized Now",2,"backgrounds",0)}).done(function(e){return r=e.id,i++,o.update_trait("Retainers",3,"backgrounds",0)}).done(function(e){return c=e.id,i++,o.update_trait("Retainers: Specialized Now",4,"backgrounds",0)}).done(function(){return i++,o.update_trait("Retainers",4,"backgrounds",0,!0)}).done(function(){return i++,o.get_recorded_changes()}).done(function(t){expect(t.models.length).toBe(i),e(t.models).slice(n,t.length).each(function(t,n){expect(t.get("name")).not.toBe(void 0);var o=t.get("name"),i=e.startsWith(o,"Retainers");i&&(0==n?(expect(t.get("type")).toBe("define"),expect(t.get("value")).toBe(1),expect(t.get("cost")).toBe(1),expect(t.get("simple_trait_id")).toBe(a)):1==n?(expect(t.get("type")).toBe("update"),expect(t.get("value")).toBe(1),expect(t.get("cost")).toBe(1),expect(t.get("name")).toBe("Retainers: Specialized Now"),expect(t.get("old_text")).toBe("Retainers"),expect(t.get("simple_trait_id")).toBe(a)):2==n?(expect(t.get("type")).toBe("update"),expect(t.get("value")).toBe(4),expect(t.get("cost")).toBe(10),expect(t.get("name")).toBe("Retainers: Specialized Again"),expect(t.get("old_text")).toBe("Retainers: Specialized Now"),expect(t.get("simple_trait_id")).toBe(a)):3==n?(expect(t.get("type")).toBe("update"),expect(t.get("old_value")).toBe(4),expect(t.get("value")).toBe(5),expect(t.get("old_cost")).toBe(10),expect(t.get("cost")).toBe(15),expect(t.get("name")).toBe("Retainers: Specialized Again"),expect(t.get("old_text")).toBe("Retainers: Specialized Again"),expect(t.get("simple_trait_id")).toBe(a)):4==n?(expect(t.get("type")).toBe("define"),expect(t.get("value")).toBe(2),expect(t.get("cost")).toBe(3),expect(t.get("name")).toBe("Retainers: Specialized Now"),expect(t.get("simple_trait_id")).toBe(r)):5==n?(expect(t.get("type")).toBe("define"),expect(t.get("value")).toBe(3),expect(t.get("cost")).toBe(6),expect(t.get("name")).toBe("Retainers"),expect(t.get("simple_trait_id")).toBe(c)):6==n?(expect(t.get("type")).toBe("update"),expect(t.get("value")).toBe(4),expect(t.get("old_value")).toBe(2),expect(t.get("old_cost")).toBe(3),expect(t.get("cost")).toBe(10),expect(t.get("name")).toBe("Retainers: Specialized Now"),expect(t.get("old_text")).toBe("Retainers: Specialized Now"),expect(t.get("simple_trait_id")).toBe(r)):7==n&&(expect(t.get("type")).toBe("update"),expect(t.get("value")).toBe(4),expect(t.get("old_value")).toBe(3),expect(t.get("old_cost")).toBe(6),expect(t.get("cost")).toBe(10),expect(t.get("name")).toBe("Retainers"),expect(t.get("old_text")).toBe("Retainers"),expect(t.get("simple_trait_id")).toBe(c)))})}).done(function(){t()}).fail(function(e){t.fail(e)})}),it("can't be renamed to collide",function(e){var t,n;o.update_trait("Retainers: Classic",1,"backgrounds",0,!0).done(function(e){return t=e,o.update_trait("Retainers: Not Classic",2,"backgrounds",0,!0)}).done(function(e){return n=e,n.set("name","Retainers: Classic"),o.update_trait(n)}).done(function(){e.fail("Allowed the rename to be persisted")}).fail(function(t){expect(t.code).toBe(1),expect(n.get("name")).toBe("Retainers: Not Classic"),e()})}),it("can fail to be removed",function(e){var t=c.prototype.destroy;c.prototype.destroy=function(){return n.Promise.error({})},o.get_trait_by_name("backgrounds","Haven").then(function(n){return o.remove_trait(n).then(function(){c.prototype.destroy=t,e.fail("Successfully removed a trait while destroy was broken")},function(n){c.prototype.destroy=t,o.get_trait_by_name("backgrounds","Haven").then(function(t){expect(t.get("value")).toBe(2),expect(t.get("free_value")).toBe(0),e()},function(t){e.fail(t)})})})}),it("can be removed",function(e){o.get_trait_by_name("backgrounds","Haven").then(function(e){return expect(e).toBeDefined(),expect(e.id).toBeDefined(),o.remove_trait(e)}).then(function(){return o.get_trait_by_name("backgrounds","Haven")}).then(function(t){expect(t).toBeUndefined(),e()}).fail(function(t){e.fail("Failed to remove the trait "+JSON.stringify(t))})})})})});