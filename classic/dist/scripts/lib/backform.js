(function(){Backform={formClassName:"backform form-horizontal",groupClassName:"form-group",controlLabelClassName:"control-label col-sm-4",controlsClassName:"col-sm-8",controlClassName:"form-control",helpClassName:"help-block",errorClassName:"has-error",helpMessageClassName:"help-block",bootstrap2:function(){_.extend(Backform,{groupClassName:"control-group",controlLabelClassName:"control-label",controlsClassName:"controls",controlClassName:"input-xlarge",helpClassName:"text-error",errorClassName:"error",helpMessageClassName:"help-message small"}),_.each(Backform,function(e,a){_.isFunction(Backform[a])&&_.isFunction(Backform[a].prototype.bootstrap2)&&Backform[a].prototype.bootstrap2()})},resolveNameToClass:function(e,a){if(_.isString(e)){var t=_.map(e.split("-"),function(e){return e.slice(0,1).toUpperCase()+e.slice(1)}).join("")+a,l=Backform[t];if(_.isUndefined(l))throw new ReferenceError("Class '"+t+"' not found");return l}return e}};var e=(Backform.Form=Backbone.View.extend({fields:void 0,errorModel:void 0,tagName:"form",className:function(){return Backform.formClassName},initialize:function(e){e.fields instanceof Backbone.Collection||(e.fields=new l(e.fields||this.fields)),this.fields=e.fields,this.model.errorModel=e.errorModel||this.model.errorModel||new Backbone.Model},render:function(){this.$el.empty();var e=this.$el,a=this.model;return this.fields.each(function(t){var l=new(t.get("control"))({field:t,model:a});e.append(l.render().$el)}),this}}),Backform.ControlFormatter=function(){});_.extend(e.prototype,{fromRaw:function(e,a){return e},toRaw:function(e,a){return e}});var a=Backform.JSONFormatter=function(){};_.extend(a.prototype,{fromRaw:function(e,a){return JSON.stringify(e)},toRaw:function(e,a){return JSON.parse(e)}});var t=Backform.Field=Backbone.Model.extend({defaults:{name:"",placeholder:"",disabled:!1,required:!1,value:void 0,control:void 0,formatter:void 0},initialize:function(){var e=Backform.resolveNameToClass(this.get("control"),"Control");this.set({control:e},{silent:!0})}}),l=Backform.Fields=Backbone.Collection.extend({model:t}),s=Backform.Control=Backbone.View.extend({defaults:{},className:function(){return Backform.groupClassName},template:_.template(['<label class="<%=Backform.controlLabelClassName%>"><%-label%></label>','<div class="<%=Backform.controlsClassName%>">','  <span class="<%=Backform.controlClassName%> uneditable-input"><%=value%></span>',"</div>"].join("\n")),initialize:function(e){this.field=e.field;var a=Backform.resolveNameToClass(this.field.get("formatter")||this.formatter,"Formatter");_.isFunction(a.fromRaw)||_.isFunction(a.toRaw)||(a=new a),this.formatter=a;var t=this.field.get("name").split("."),l=t.shift();this.listenTo(this.model,"change:"+l,this.render),this.model.errorModel instanceof Backbone.Model&&this.listenTo(this.model.errorModel,"change:"+l,this.updateInvalid)},formatter:e,getValueFromDOM:function(){return this.formatter.toRaw(this.$el.find(".uneditable-input").text(),this.model)},onChange:function(e){var a=this.model,t=($(e.target),this.field.get("name").split(".")),l=t.shift(),s=t.join("."),o=this.getValueFromDOM(),r={};if(this.model.errorModel instanceof Backbone.Model)if(_.isEmpty(s))this.model.errorModel.unset(l);else{var n=this.model.errorModel.get(l);n&&(this.keyPathSetter(n,s,null),this.model.errorModel.set(l,n))}r[l]=_.isEmpty(s)?o:_.clone(a.get(l))||{},_.isEmpty(s)||this.keyPathSetter(r[l],s,o),this.stopListening(this.model,"change:"+l,this.render),a.set(r),this.listenTo(this.model,"change:"+l,this.render)},render:function(){var e=_.defaults(this.field.toJSON(),this.defaults),a=this.model.toJSON(),t=e.name.split("."),l=t.shift(),s=t.join("."),o=this.keyPathAccessor(a[l],s),r=_.extend(e,{rawValue:o,value:this.formatter.fromRaw(o,this.model),attributes:a,formatter:this.formatter});return this.$el.html(this.template(r)).addClass(e.name),this.updateInvalid(),this},clearInvalid:function(){return this.$el.removeClass(Backform.errorClassName).find("."+Backform.helpClassName+".error").remove(),this},updateInvalid:function(){var e=this.model.errorModel;if(!(e instanceof Backbone.Model))return this;this.clearInvalid();var a=this.field.get("name").split("."),t=a.shift(),l=a.join("."),s=e.get(t);if(!_.isEmpty(s)&&(_.isObject(s)&&(s=this.keyPathAccessor(s,l)),!_.isEmpty(s)))return this.$el.addClass(Backform.errorClassName),this.$el.find("."+Backform.controlsClassName).append('<span class="'+Backform.helpClassName+' error">'+(_.isArray(s)?s.join(", "):s)+"</span>"),this},keyPathAccessor:function(e,a){var t=e;a=a.split(".");for(var l=0;l<a.length;l++){if(_.isNull(t))return null;_.isEmpty(a[l])||_.isUndefined(t[a[l]])||(t=t[a[l]])}return _.isObject(t)&&!_.isArray(t)?null:t},keyPathSetter:function(e,a,t){for(a=a.split(".");a.length>1;)e[a[0]]||(e[a[0]]={}),e=e[a.shift()];return e[a.shift()]=t}}),o=(Backform.UneditableInputControl=s,Backform.HelpControl=s.extend({template:_.template(['<label class="<%=Backform.controlLabelClassName%>">&nbsp;</label>','<div class="<%=Backform.controlsClassName%>">','  <span class="<%=Backform.helpMessageClassName%> help-block"><%=label%></span>',"</div>"].join("\n"))}),Backform.SpacerControl=s.extend({template:_.template(['<label class="<%=Backform.controlLabelClassName%>">&nbsp;</label>','<div class="<%=Backform.controlsClassName%>"></div>'].join("\n"))}),Backform.TextareaControl=s.extend({defaults:{label:"",maxlength:4e3,extraClasses:[],helpMessage:""},template:_.template(['<label class="<%=Backform.controlLabelClassName%>"><%-label%></label>','<div class="<%=Backform.controlsClassName%>">','  <textarea class="<%=Backform.controlClassName%> <%=extraClasses.join(\' \')%>" name="<%=name%>" maxlength="<%=maxlength%>" placeholder="<%-placeholder%>" <%=disabled ? "disabled" : ""%> <%=required ? "required" : ""%>><%-value%></textarea>',"  <% if (helpMessage.length) { %>",'    <span class="<%=Backform.helpMessageClassName%>"><%=helpMessage%></span>',"  <% } %>","</div>"].join("\n")),events:{"change textarea":"onChange","focus textarea":"clearInvalid"},getValueFromDOM:function(){return this.formatter.toRaw(this.$el.find("textarea").val(),this.model)}}),Backform.SelectControl=s.extend({defaults:{label:"",options:[],extraClasses:[]},template:_.template(['<label class="<%=Backform.controlLabelClassName%>"><%-label%></label>','<div class="<%=Backform.controlsClassName%>">','  <select class="<%=Backform.controlClassName%> <%=extraClasses.join(\' \')%>" name="<%=name%>" value="<%-value%>" <%=disabled ? "disabled" : ""%> <%=required ? "required" : ""%> >',"    <% for (var i=0; i < options.length; i++) { %>","      <% var option = options[i]; %>",'      <option value="<%-formatter.fromRaw(option.value)%>" <%=option.value === rawValue ? "selected=\'selected\'" : ""%> <%=option.disabled ? "disabled=\'disabled\'" : ""%>><%-option.label%></option>',"    <% } %>","  </select>","</div>"].join("\n")),events:{"change select":"onChange","focus select":"clearInvalid"},formatter:a,getValueFromDOM:function(){return this.formatter.toRaw(this.$el.find("select").val(),this.model)}}),Backform.MultiSelectControl=s.extend({defaults:{label:"",options:[],extraClasses:[],height:"78px"},template:_.template(['<label class="<%=Backform.controlLabelClassName%>"><%-label%></label>','<div class="<%=Backform.controlsClassName%>">','  <select multiple="multiple" class="<%=Backform.controlClassName%> <%=extraClasses.join(\' \')%>" name="<%=name%>" value="<%-value%>" <%=disabled ? "disabled" : ""%> <%=required ? "required" : ""%> style="height:<%=height%>">',"    <% for (var i=0; i < options.length; i++) { %>","      <% var option = options[i]; %>",'      <option value="<%-formatter.fromRaw(option.value)%>" <%=option.value == rawValue ? "selected=\'selected\'" : ""%> <%=option.disabled ? "disabled=\'disabled\'" : ""%>><%-option.label%></option>',"    <% } %>","  </select>","</div>"].join("\n")),events:{"change select":"onChange","dblclick select":"onDoubleClick","focus select":"clearInvalid"},formatter:a,getValueFromDOM:function(){return this.formatter.toRaw(this.$el.find("select").val(),this.model)},onDoubleClick:function(e){this.model.trigger("doubleclick",e)}}),Backform.InputControl=s.extend({defaults:{type:"text",label:"",maxlength:255,extraClasses:[],helpMessage:""},template:_.template(['<label class="<%=Backform.controlLabelClassName%>"><%-label%></label>','<div class="<%=Backform.controlsClassName%>">','  <input type="<%=type%>" class="<%=Backform.controlClassName%> <%=extraClasses.join(\' \')%>" name="<%=name%>" maxlength="<%=maxlength%>" value="<%-value%>" placeholder="<%-placeholder%>" <%=disabled ? "disabled" : ""%> <%=required ? "required" : ""%> />',"  <% if (helpMessage.length) { %>",'    <span class="<%=Backform.helpMessageClassName%>"><%=helpMessage%></span>',"  <% } %>","</div>"].join("\n")),events:{"change input":"onChange","focus input":"clearInvalid"},getValueFromDOM:function(){return this.formatter.toRaw(this.$el.find("input").val(),this.model)}})),r=Backform.BooleanControl=o.extend({defaults:{type:"checkbox",label:"",controlLabel:"&nbsp;",extraClasses:[]},template:_.template(['<label class="<%=Backform.controlLabelClassName%>"><%=controlLabel%></label>','<div class="<%=Backform.controlsClassName%>">','  <div class="checkbox">',"    <label>",'      <input type="<%=type%>" class="<%=extraClasses.join(\' \')%>" name="<%=name%>" <%=value ? "checked=\'checked\'" : ""%> <%=disabled ? "disabled" : ""%> <%=required ? "required" : ""%> /> <%-label%>',"    </label>","  </div>","</div>"].join("\n")),getValueFromDOM:function(){return this.formatter.toRaw(this.$el.find("input").is(":checked"),this.model)}});Backform.CheckboxControl=r,Backform.RadioControl=o.extend({defaults:{type:"radio",label:"",options:[],extraClasses:[]},template:_.template(['<label class="<%=Backform.controlLabelClassName%>"><%-label%></label>','<div class="<%=Backform.controlsClassName%> <%=Backform.radioControlsClassName%>">',"  <% for (var i=0; i < options.length; i++) { %>","    <% var option = options[i]; %>",'    <label class="<%=Backform.radioLabelClassName%>">','      <input type="<%=type%>" class="<%=extraClasses.join(\' \')%>" name="<%=name%>" value="<%-formatter.fromRaw(option.value)%>" <%=rawValue == option.value ? "checked=\'checked\'" : ""%> <%=disabled ? "disabled" : ""%> <%=required ? "required" : ""%> /> <%-option.label%>',"    </label>","  <% } %>","</div>"].join("\n")),formatter:a,getValueFromDOM:function(){return this.formatter.toRaw(this.$el.find("input:checked").val(),this.model)},bootstrap2:function(){Backform.radioControlsClassName="controls",Backform.radioLabelClassName="radio inline"}});_.extend(Backform,{radioControlsClassName:"checkbox",radioLabelClassName:"checkbox-inline"});Backform.DatepickerControl=o.extend({defaults:{type:"text",label:"",options:{},extraClasses:[],maxlength:255,helpMessage:""},events:{"blur input":"onChange","change input":"onChange","changeDate input":"onChange","focus input":"clearInvalid"},render:function(){return o.prototype.render.apply(this,arguments),this.$el.find("input").datepicker(this.field.get("options")),this}}),Backform.ButtonControl=s.extend({defaults:{type:"submit",label:"Submit",status:void 0,message:void 0,extraClasses:[]},template:_.template(['<label class="<%=Backform.controlLabelClassName%>">&nbsp;</label>','<div class="<%=Backform.controlsClassName%>">','  <button type="<%=type%>" name="<%=name%>" class="btn <%=extraClasses.join(\' \')%>" <%=disabled ? "disabled" : ""%> ><%-label%></button>','  <% var cls = ""; if (status == "error") cls = Backform.buttonStatusErrorClassName; if (status == "success") cls = Backform.buttonStatusSuccessClassname; %>','  <span class="status <%=cls%>"><%=message%></span>',"</div>"].join("\n")),initialize:function(){s.prototype.initialize.apply(this,arguments),this.listenTo(this.field,"change:status",this.render),this.listenTo(this.field,"change:message",this.render)},bootstrap2:function(){Backform.buttonStatusErrorClassName="text-error",Backform.buttonStatusSuccessClassname="text-success"}});_.extend(Backform,{buttonStatusErrorClassName:"text-danger",buttonStatusSuccessClassname:"text-success"})}).call(this);